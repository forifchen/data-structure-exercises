namespace segment_tree {
    template<class Node>
    class SegmentTree {
        int size;
        std::vector<Node> range;
        Node reduceLeft(Node& res, std::vector<int> const& nodeIds, bool& isFirst) const {
            for (auto& nodeId : nodeIds) {
                if (isFirst) {
                    res = range[nodeId];
                    isFirst = false;
                } else {
                    res = merge(res, range[nodeId]);
                }
            }
        }
        Node reduceRight(Node& res, std::vector<int> const& nodeIds, bool& isFirst) const {
            for (auto it = nodeIds.rbegin(); it != nodeIds.rend(); ++ it) {
                if (isFirst) {
                    res = range[*it];
                    isFirst = false;
                } else {
                    res = merge(res, range[*it]);
                }
            }
        }
        virtual Node merge(Node const& lhs, Node const& rhs) const = 0;
        virtual Node buildLeaf(int index) = 0;
    public:
        Node rangeQuery(int from, int to) const {
            std::vector<int> leftNodes, rightNodes;
            for (from += size, to += size; from < to; from >>= 1, to >>= 1) {
                if (from & 1) {
                    leftNodes.push_back(from);
                    from ++;
                }
                if (to & 1) {
                    to --;
                    rightNodes.push_back(to);
                }
            }
            Node res;
            bool isFirst = true;
            reduceLeft(res, leftNodes, isFirst);
            reduceRight(res, rightNodes, isFirst);
            return res;
        }
        void init(int n) {
            size = n;
            range.resize(n * 2);
            for (int i = 0; i < size; ++ i) range[i + size] = buildLeaf(i);
            for (int i = size - 1; i >= 1; -- i) {
                range[i] = merge(range[i*2], range[i*2 + 1]);
            }
        }
    };
}
